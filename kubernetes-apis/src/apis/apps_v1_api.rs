/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct AppsV1ApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl AppsV1ApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> AppsV1ApiClient {
        AppsV1ApiClient {
            configuration: configuration,
        }
    }
}

pub trait AppsV1Api {
    fn create_apps_v1_namespaced_controller_revision(&self, namespace: &str, io_k8s_api_apps_v1_controller_revision: ::models::IoK8sApiAppsV1ControllerRevision, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ControllerRevision, Error>;
    fn create_apps_v1_namespaced_daemon_set(&self, namespace: &str, io_k8s_api_apps_v1_daemon_set: ::models::IoK8sApiAppsV1DaemonSet, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error>;
    fn create_apps_v1_namespaced_deployment(&self, namespace: &str, io_k8s_api_apps_v1_deployment: ::models::IoK8sApiAppsV1Deployment, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error>;
    fn create_apps_v1_namespaced_replica_set(&self, namespace: &str, io_k8s_api_apps_v1_replica_set: ::models::IoK8sApiAppsV1ReplicaSet, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error>;
    fn create_apps_v1_namespaced_stateful_set(&self, namespace: &str, io_k8s_api_apps_v1_stateful_set: ::models::IoK8sApiAppsV1StatefulSet, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error>;
    fn delete_apps_v1_collection_namespaced_controller_revision(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_apps_v1_collection_namespaced_daemon_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_apps_v1_collection_namespaced_deployment(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_apps_v1_collection_namespaced_replica_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_apps_v1_collection_namespaced_stateful_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn get_apps_v1_api_resources(&self, ) -> Result<::models::IoK8sApimachineryPkgApisMetaV1ApiResourceList, Error>;
    fn list_apps_v1_controller_revision_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1ControllerRevisionList, Error>;
    fn list_apps_v1_daemon_set_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1DaemonSetList, Error>;
    fn list_apps_v1_deployment_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1DeploymentList, Error>;
    fn list_apps_v1_namespaced_controller_revision(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1ControllerRevisionList, Error>;
    fn list_apps_v1_namespaced_daemon_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1DaemonSetList, Error>;
    fn list_apps_v1_namespaced_deployment(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1DeploymentList, Error>;
    fn list_apps_v1_namespaced_replica_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1ReplicaSetList, Error>;
    fn list_apps_v1_namespaced_stateful_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1StatefulSetList, Error>;
    fn list_apps_v1_replica_set_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1ReplicaSetList, Error>;
    fn list_apps_v1_stateful_set_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1StatefulSetList, Error>;
    fn patch_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ControllerRevision, Error>;
    fn patch_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error>;
    fn patch_apps_v1_namespaced_daemon_set_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error>;
    fn patch_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error>;
    fn patch_apps_v1_namespaced_deployment_scale(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error>;
    fn patch_apps_v1_namespaced_deployment_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error>;
    fn patch_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error>;
    fn patch_apps_v1_namespaced_replica_set_scale(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error>;
    fn patch_apps_v1_namespaced_replica_set_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error>;
    fn patch_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error>;
    fn patch_apps_v1_namespaced_stateful_set_scale(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error>;
    fn patch_apps_v1_namespaced_stateful_set_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error>;
    fn read_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1ControllerRevision, Error>;
    fn read_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error>;
    fn read_apps_v1_namespaced_daemon_set_status(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error>;
    fn read_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1Deployment, Error>;
    fn read_apps_v1_namespaced_deployment_scale(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error>;
    fn read_apps_v1_namespaced_deployment_status(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error>;
    fn read_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error>;
    fn read_apps_v1_namespaced_replica_set_scale(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error>;
    fn read_apps_v1_namespaced_replica_set_status(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error>;
    fn read_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error>;
    fn read_apps_v1_namespaced_stateful_set_scale(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error>;
    fn read_apps_v1_namespaced_stateful_set_status(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error>;
    fn replace_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_controller_revision: ::models::IoK8sApiAppsV1ControllerRevision, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ControllerRevision, Error>;
    fn replace_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_daemon_set: ::models::IoK8sApiAppsV1DaemonSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error>;
    fn replace_apps_v1_namespaced_daemon_set_status(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_daemon_set: ::models::IoK8sApiAppsV1DaemonSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error>;
    fn replace_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_deployment: ::models::IoK8sApiAppsV1Deployment, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error>;
    fn replace_apps_v1_namespaced_deployment_scale(&self, name: &str, namespace: &str, io_k8s_api_autoscaling_v1_scale: ::models::IoK8sApiAutoscalingV1Scale, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error>;
    fn replace_apps_v1_namespaced_deployment_status(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_deployment: ::models::IoK8sApiAppsV1Deployment, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error>;
    fn replace_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_replica_set: ::models::IoK8sApiAppsV1ReplicaSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error>;
    fn replace_apps_v1_namespaced_replica_set_scale(&self, name: &str, namespace: &str, io_k8s_api_autoscaling_v1_scale: ::models::IoK8sApiAutoscalingV1Scale, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error>;
    fn replace_apps_v1_namespaced_replica_set_status(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_replica_set: ::models::IoK8sApiAppsV1ReplicaSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error>;
    fn replace_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_stateful_set: ::models::IoK8sApiAppsV1StatefulSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error>;
    fn replace_apps_v1_namespaced_stateful_set_scale(&self, name: &str, namespace: &str, io_k8s_api_autoscaling_v1_scale: ::models::IoK8sApiAutoscalingV1Scale, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error>;
    fn replace_apps_v1_namespaced_stateful_set_status(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_stateful_set: ::models::IoK8sApiAppsV1StatefulSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error>;
    fn watch_apps_v1_controller_revision_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_daemon_set_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_deployment_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_controller_revision_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_daemon_set_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_deployment_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_replica_set_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_namespaced_stateful_set_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_replica_set_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_apps_v1_stateful_set_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
}


impl AppsV1Api for AppsV1ApiClient {
    fn create_apps_v1_namespaced_controller_revision(&self, namespace: &str, io_k8s_api_apps_v1_controller_revision: ::models::IoK8sApiAppsV1ControllerRevision, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ControllerRevision, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/controllerrevisions?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_controller_revision);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_apps_v1_namespaced_daemon_set(&self, namespace: &str, io_k8s_api_apps_v1_daemon_set: ::models::IoK8sApiAppsV1DaemonSet, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_daemon_set);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_apps_v1_namespaced_deployment(&self, namespace: &str, io_k8s_api_apps_v1_deployment: ::models::IoK8sApiAppsV1Deployment, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_deployment);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_apps_v1_namespaced_replica_set(&self, namespace: &str, io_k8s_api_apps_v1_replica_set: ::models::IoK8sApiAppsV1ReplicaSet, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_replica_set);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_apps_v1_namespaced_stateful_set(&self, namespace: &str, io_k8s_api_apps_v1_stateful_set: ::models::IoK8sApiAppsV1StatefulSet, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_stateful_set);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_collection_namespaced_controller_revision(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/controllerrevisions?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_collection_namespaced_daemon_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_collection_namespaced_deployment(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_collection_namespaced_replica_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_collection_namespaced_stateful_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());
            query.append_pair("gracePeriodSeconds", &grace_period_seconds.to_string());
            query.append_pair("orphanDependents", &orphan_dependents.to_string());
            query.append_pair("propagationPolicy", &propagation_policy.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_delete_options);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());
            query.append_pair("gracePeriodSeconds", &grace_period_seconds.to_string());
            query.append_pair("orphanDependents", &orphan_dependents.to_string());
            query.append_pair("propagationPolicy", &propagation_policy.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_delete_options);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());
            query.append_pair("gracePeriodSeconds", &grace_period_seconds.to_string());
            query.append_pair("orphanDependents", &orphan_dependents.to_string());
            query.append_pair("propagationPolicy", &propagation_policy.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_delete_options);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());
            query.append_pair("gracePeriodSeconds", &grace_period_seconds.to_string());
            query.append_pair("orphanDependents", &orphan_dependents.to_string());
            query.append_pair("propagationPolicy", &propagation_policy.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_delete_options);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());
            query.append_pair("gracePeriodSeconds", &grace_period_seconds.to_string());
            query.append_pair("orphanDependents", &orphan_dependents.to_string());
            query.append_pair("propagationPolicy", &propagation_policy.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_delete_options);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_apps_v1_api_resources(&self, ) -> Result<::models::IoK8sApimachineryPkgApisMetaV1ApiResourceList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_controller_revision_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1ControllerRevisionList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/controllerrevisions?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_daemon_set_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1DaemonSetList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/daemonsets?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_deployment_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1DeploymentList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/deployments?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_namespaced_controller_revision(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1ControllerRevisionList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/controllerrevisions?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_namespaced_daemon_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1DaemonSetList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_namespaced_deployment(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1DeploymentList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_namespaced_replica_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1ReplicaSetList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_namespaced_stateful_set(&self, namespace: &str, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1StatefulSetList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_replica_set_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1ReplicaSetList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/replicasets?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_apps_v1_stateful_set_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiAppsV1StatefulSetList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/statefulsets?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ControllerRevision, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_daemon_set_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_deployment_scale(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_deployment_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_replica_set_scale(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_replica_set_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_stateful_set_scale(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_apps_v1_namespaced_stateful_set_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1ControllerRevision, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("exact", &exact.to_string());
            query.append_pair("export", &export.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("exact", &exact.to_string());
            query.append_pair("export", &export.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_daemon_set_status(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1Deployment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("exact", &exact.to_string());
            query.append_pair("export", &export.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_deployment_scale(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_deployment_status(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("exact", &exact.to_string());
            query.append_pair("export", &export.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_replica_set_scale(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_replica_set_status(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("exact", &exact.to_string());
            query.append_pair("export", &export.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_stateful_set_scale(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_apps_v1_namespaced_stateful_set_status(&self, name: &str, namespace: &str, pretty: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_controller_revision: ::models::IoK8sApiAppsV1ControllerRevision, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ControllerRevision, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_controller_revision);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_daemon_set: ::models::IoK8sApiAppsV1DaemonSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_daemon_set);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_daemon_set_status(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_daemon_set: ::models::IoK8sApiAppsV1DaemonSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1DaemonSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_daemon_set);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_deployment: ::models::IoK8sApiAppsV1Deployment, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_deployment);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_deployment_scale(&self, name: &str, namespace: &str, io_k8s_api_autoscaling_v1_scale: ::models::IoK8sApiAutoscalingV1Scale, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_autoscaling_v1_scale);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_deployment_status(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_deployment: ::models::IoK8sApiAppsV1Deployment, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1Deployment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_deployment);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_replica_set: ::models::IoK8sApiAppsV1ReplicaSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_replica_set);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_replica_set_scale(&self, name: &str, namespace: &str, io_k8s_api_autoscaling_v1_scale: ::models::IoK8sApiAutoscalingV1Scale, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_autoscaling_v1_scale);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_replica_set_status(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_replica_set: ::models::IoK8sApiAppsV1ReplicaSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1ReplicaSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_replica_set);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_stateful_set: ::models::IoK8sApiAppsV1StatefulSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_stateful_set);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_stateful_set_scale(&self, name: &str, namespace: &str, io_k8s_api_autoscaling_v1_scale: ::models::IoK8sApiAutoscalingV1Scale, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAutoscalingV1Scale, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_autoscaling_v1_scale);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_apps_v1_namespaced_stateful_set_status(&self, name: &str, namespace: &str, io_k8s_api_apps_v1_stateful_set: ::models::IoK8sApiAppsV1StatefulSet, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiAppsV1StatefulSet, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_apps_v1_stateful_set);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_controller_revision_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/controllerrevisions?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_daemon_set_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/daemonsets?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_deployment_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/deployments?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_controller_revision(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_controller_revision_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_daemon_set(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_daemon_set_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/daemonsets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_deployment(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_deployment_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/deployments?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_replica_set(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_replica_set_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/replicasets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_stateful_set(&self, name: &str, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}?{}", configuration.base_path, query_string, name=name, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_namespaced_stateful_set_list(&self, namespace: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/namespaces/{namespace}/statefulsets?{}", configuration.base_path, query_string, namespace=namespace);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_replica_set_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/replicasets?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_apps_v1_stateful_set_list_for_all_namespaces(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/apps/v1/watch/statefulsets?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
