/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct StorageV1beta1ApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl StorageV1beta1ApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> StorageV1beta1ApiClient {
        StorageV1beta1ApiClient {
            configuration: configuration,
        }
    }
}

pub trait StorageV1beta1Api {
    fn create_storage_v1beta1_storage_class(&self, io_k8s_api_storage_v1beta1_storage_class: ::models::IoK8sApiStorageV1beta1StorageClass, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1StorageClass, Error>;
    fn create_storage_v1beta1_volume_attachment(&self, io_k8s_api_storage_v1beta1_volume_attachment: ::models::IoK8sApiStorageV1beta1VolumeAttachment, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachment, Error>;
    fn delete_storage_v1beta1_collection_storage_class(&self, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_storage_v1beta1_collection_volume_attachment(&self, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_storage_v1beta1_storage_class(&self, name: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn delete_storage_v1beta1_volume_attachment(&self, name: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error>;
    fn get_storage_v1beta1_api_resources(&self, ) -> Result<::models::IoK8sApimachineryPkgApisMetaV1ApiResourceList, Error>;
    fn list_storage_v1beta1_storage_class(&self, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiStorageV1beta1StorageClassList, Error>;
    fn list_storage_v1beta1_volume_attachment(&self, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachmentList, Error>;
    fn patch_storage_v1beta1_storage_class(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1StorageClass, Error>;
    fn patch_storage_v1beta1_volume_attachment(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachment, Error>;
    fn read_storage_v1beta1_storage_class(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiStorageV1beta1StorageClass, Error>;
    fn read_storage_v1beta1_volume_attachment(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachment, Error>;
    fn replace_storage_v1beta1_storage_class(&self, name: &str, io_k8s_api_storage_v1beta1_storage_class: ::models::IoK8sApiStorageV1beta1StorageClass, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1StorageClass, Error>;
    fn replace_storage_v1beta1_volume_attachment(&self, name: &str, io_k8s_api_storage_v1beta1_volume_attachment: ::models::IoK8sApiStorageV1beta1VolumeAttachment, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachment, Error>;
    fn watch_storage_v1beta1_storage_class(&self, name: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_storage_v1beta1_storage_class_list(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_storage_v1beta1_volume_attachment(&self, name: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
    fn watch_storage_v1beta1_volume_attachment_list(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error>;
}


impl StorageV1beta1Api for StorageV1beta1ApiClient {
    fn create_storage_v1beta1_storage_class(&self, io_k8s_api_storage_v1beta1_storage_class: ::models::IoK8sApiStorageV1beta1StorageClass, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1StorageClass, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/storageclasses?{}", configuration.base_path, query_string);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_storage_v1beta1_storage_class);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_storage_v1beta1_volume_attachment(&self, io_k8s_api_storage_v1beta1_volume_attachment: ::models::IoK8sApiStorageV1beta1VolumeAttachment, include_uninitialized: bool, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/volumeattachments?{}", configuration.base_path, query_string);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_storage_v1beta1_volume_attachment);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_storage_v1beta1_collection_storage_class(&self, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/storageclasses?{}", configuration.base_path, query_string);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_storage_v1beta1_collection_volume_attachment(&self, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/volumeattachments?{}", configuration.base_path, query_string);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_storage_v1beta1_storage_class(&self, name: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());
            query.append_pair("gracePeriodSeconds", &grace_period_seconds.to_string());
            query.append_pair("orphanDependents", &orphan_dependents.to_string());
            query.append_pair("propagationPolicy", &propagation_policy.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/storageclasses/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_delete_options);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_storage_v1beta1_volume_attachment(&self, name: &str, pretty: &str, dry_run: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions) -> Result<::models::IoK8sApimachineryPkgApisMetaV1Status, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());
            query.append_pair("gracePeriodSeconds", &grace_period_seconds.to_string());
            query.append_pair("orphanDependents", &orphan_dependents.to_string());
            query.append_pair("propagationPolicy", &propagation_policy.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/volumeattachments/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_delete_options);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_storage_v1beta1_api_resources(&self, ) -> Result<::models::IoK8sApimachineryPkgApisMetaV1ApiResourceList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_storage_v1beta1_storage_class(&self, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiStorageV1beta1StorageClassList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/storageclasses?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_storage_v1beta1_volume_attachment(&self, include_uninitialized: bool, pretty: &str, _continue: &str, field_selector: &str, label_selector: &str, limit: i32, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachmentList, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/volumeattachments?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_storage_v1beta1_storage_class(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1StorageClass, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/storageclasses/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn patch_storage_v1beta1_volume_attachment(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/volumeattachments/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.patch(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_apimachinery_pkg_apis_meta_v1_patch);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_storage_v1beta1_storage_class(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiStorageV1beta1StorageClass, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("exact", &exact.to_string());
            query.append_pair("export", &export.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/storageclasses/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn read_storage_v1beta1_volume_attachment(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("exact", &exact.to_string());
            query.append_pair("export", &export.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/volumeattachments/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_storage_v1beta1_storage_class(&self, name: &str, io_k8s_api_storage_v1beta1_storage_class: ::models::IoK8sApiStorageV1beta1StorageClass, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1StorageClass, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/storageclasses/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_storage_v1beta1_storage_class);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_storage_v1beta1_volume_attachment(&self, name: &str, io_k8s_api_storage_v1beta1_volume_attachment: ::models::IoK8sApiStorageV1beta1VolumeAttachment, pretty: &str, dry_run: &str) -> Result<::models::IoK8sApiStorageV1beta1VolumeAttachment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("dryRun", &dry_run.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/volumeattachments/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        

        req_builder = req_builder.json(&io_k8s_api_storage_v1beta1_volume_attachment);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_storage_v1beta1_storage_class(&self, name: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_storage_v1beta1_storage_class_list(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/watch/storageclasses?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_storage_v1beta1_volume_attachment(&self, name: &str, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/watch/volumeattachments/{name}?{}", configuration.base_path, query_string, name=name);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn watch_storage_v1beta1_volume_attachment_list(&self, _continue: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, limit: i32, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Result<::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("continue", &_continue.to_string());
            query.append_pair("fieldSelector", &field_selector.to_string());
            query.append_pair("includeUninitialized", &include_uninitialized.to_string());
            query.append_pair("labelSelector", &label_selector.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("pretty", &pretty.to_string());
            query.append_pair("resourceVersion", &resource_version.to_string());
            query.append_pair("timeoutSeconds", &timeout_seconds.to_string());
            query.append_pair("watch", &watch.to_string());

            query.finish()
        };
        let uri_str = format!("{}/apis/storage.k8s.io/v1beta1/watch/volumeattachments?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
