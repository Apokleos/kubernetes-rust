/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1ResourceQuotaSpec : ResourceQuotaSpec defines the desired hard limits to enforce for Quota.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1ResourceQuotaSpec {
  /// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
  #[serde(rename = "hard")]
  hard: Option<::std::collections::HashMap<String, String>>,
  #[serde(rename = "scopeSelector")]
  scope_selector: Option<::models::IoK8sApiCoreV1ScopeSelector>,
  /// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
  #[serde(rename = "scopes")]
  scopes: Option<Vec<String>>
}

impl IoK8sApiCoreV1ResourceQuotaSpec {
  /// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
  pub fn new() -> IoK8sApiCoreV1ResourceQuotaSpec {
    IoK8sApiCoreV1ResourceQuotaSpec {
      hard: None,
      scope_selector: None,
      scopes: None
    }
  }

  pub fn set_hard(&mut self, hard: ::std::collections::HashMap<String, String>) {
    self.hard = Some(hard);
  }

  pub fn with_hard(mut self, hard: ::std::collections::HashMap<String, String>) -> IoK8sApiCoreV1ResourceQuotaSpec {
    self.hard = Some(hard);
    self
  }

  pub fn hard(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.hard.as_ref()
  }

  pub fn reset_hard(&mut self) {
    self.hard = None;
  }

  pub fn set_scope_selector(&mut self, scope_selector: ::models::IoK8sApiCoreV1ScopeSelector) {
    self.scope_selector = Some(scope_selector);
  }

  pub fn with_scope_selector(mut self, scope_selector: ::models::IoK8sApiCoreV1ScopeSelector) -> IoK8sApiCoreV1ResourceQuotaSpec {
    self.scope_selector = Some(scope_selector);
    self
  }

  pub fn scope_selector(&self) -> Option<&::models::IoK8sApiCoreV1ScopeSelector> {
    self.scope_selector.as_ref()
  }

  pub fn reset_scope_selector(&mut self) {
    self.scope_selector = None;
  }

  pub fn set_scopes(&mut self, scopes: Vec<String>) {
    self.scopes = Some(scopes);
  }

  pub fn with_scopes(mut self, scopes: Vec<String>) -> IoK8sApiCoreV1ResourceQuotaSpec {
    self.scopes = Some(scopes);
    self
  }

  pub fn scopes(&self) -> Option<&Vec<String>> {
    self.scopes.as_ref()
  }

  pub fn reset_scopes(&mut self) {
    self.scopes = None;
  }

}



