/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1HttpGetAction : HTTPGetAction describes an action based on HTTP Get requests.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1HttpGetAction {
  /// Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.
  #[serde(rename = "host")]
  host: Option<String>,
  /// Custom headers to set in the request. HTTP allows repeated headers.
  #[serde(rename = "httpHeaders")]
  http_headers: Option<Vec<::models::IoK8sApiCoreV1HttpHeader>>,
  /// Path to access on the HTTP server.
  #[serde(rename = "path")]
  path: Option<String>,
  /// IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
  #[serde(rename = "port")]
  port: i32,
  /// Scheme to use for connecting to the host. Defaults to HTTP.
  #[serde(rename = "scheme")]
  scheme: Option<String>
}

impl IoK8sApiCoreV1HttpGetAction {
  /// HTTPGetAction describes an action based on HTTP Get requests.
  pub fn new(port: i32) -> IoK8sApiCoreV1HttpGetAction {
    IoK8sApiCoreV1HttpGetAction {
      host: None,
      http_headers: None,
      path: None,
      port: port,
      scheme: None
    }
  }

  pub fn set_host(&mut self, host: String) {
    self.host = Some(host);
  }

  pub fn with_host(mut self, host: String) -> IoK8sApiCoreV1HttpGetAction {
    self.host = Some(host);
    self
  }

  pub fn host(&self) -> Option<&String> {
    self.host.as_ref()
  }

  pub fn reset_host(&mut self) {
    self.host = None;
  }

  pub fn set_http_headers(&mut self, http_headers: Vec<::models::IoK8sApiCoreV1HttpHeader>) {
    self.http_headers = Some(http_headers);
  }

  pub fn with_http_headers(mut self, http_headers: Vec<::models::IoK8sApiCoreV1HttpHeader>) -> IoK8sApiCoreV1HttpGetAction {
    self.http_headers = Some(http_headers);
    self
  }

  pub fn http_headers(&self) -> Option<&Vec<::models::IoK8sApiCoreV1HttpHeader>> {
    self.http_headers.as_ref()
  }

  pub fn reset_http_headers(&mut self) {
    self.http_headers = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> IoK8sApiCoreV1HttpGetAction {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_port(&mut self, port: i32) {
    self.port = port;
  }

  pub fn with_port(mut self, port: i32) -> IoK8sApiCoreV1HttpGetAction {
    self.port = port;
    self
  }

  pub fn port(&self) -> &i32 {
    &self.port
  }


  pub fn set_scheme(&mut self, scheme: String) {
    self.scheme = Some(scheme);
  }

  pub fn with_scheme(mut self, scheme: String) -> IoK8sApiCoreV1HttpGetAction {
    self.scheme = Some(scheme);
    self
  }

  pub fn scheme(&self) -> Option<&String> {
    self.scheme.as_ref()
  }

  pub fn reset_scheme(&mut self) {
    self.scheme = None;
  }

}



