/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1Event : Event is a report of an event somewhere in the cluster.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1Event {
  /// What action was taken/failed regarding to the Regarding object.
  #[serde(rename = "action")]
  action: Option<String>,
  /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
  #[serde(rename = "apiVersion")]
  api_version: Option<String>,
  /// The number of times this event has occurred.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// MicroTime is version of Time with microsecond level precision.
  #[serde(rename = "eventTime")]
  event_time: Option<String>,
  /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
  #[serde(rename = "firstTimestamp")]
  first_timestamp: Option<String>,
  #[serde(rename = "involvedObject")]
  involved_object: ::models::IoK8sApiCoreV1ObjectReference,
  /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  #[serde(rename = "kind")]
  kind: Option<String>,
  /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
  #[serde(rename = "lastTimestamp")]
  last_timestamp: Option<String>,
  /// A human-readable description of the status of this operation.
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "metadata")]
  metadata: ::models::IoK8sApimachineryPkgApisMetaV1ObjectMeta,
  /// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
  #[serde(rename = "reason")]
  reason: Option<String>,
  #[serde(rename = "related")]
  related: Option<::models::IoK8sApiCoreV1ObjectReference>,
  /// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
  #[serde(rename = "reportingComponent")]
  reporting_component: Option<String>,
  /// ID of the controller instance, e.g. `kubelet-xyzf`.
  #[serde(rename = "reportingInstance")]
  reporting_instance: Option<String>,
  #[serde(rename = "series")]
  series: Option<::models::IoK8sApiCoreV1EventSeries>,
  #[serde(rename = "source")]
  source: Option<::models::IoK8sApiCoreV1EventSource>,
  /// Type of this event (Normal, Warning), new types could be added in the future
  #[serde(rename = "type")]
  _type: Option<String>
}

impl IoK8sApiCoreV1Event {
  /// Event is a report of an event somewhere in the cluster.
  pub fn new(involved_object: ::models::IoK8sApiCoreV1ObjectReference, metadata: ::models::IoK8sApimachineryPkgApisMetaV1ObjectMeta) -> IoK8sApiCoreV1Event {
    IoK8sApiCoreV1Event {
      action: None,
      api_version: None,
      count: None,
      event_time: None,
      first_timestamp: None,
      involved_object: involved_object,
      kind: None,
      last_timestamp: None,
      message: None,
      metadata: metadata,
      reason: None,
      related: None,
      reporting_component: None,
      reporting_instance: None,
      series: None,
      source: None,
      _type: None
    }
  }

  pub fn set_action(&mut self, action: String) {
    self.action = Some(action);
  }

  pub fn with_action(mut self, action: String) -> IoK8sApiCoreV1Event {
    self.action = Some(action);
    self
  }

  pub fn action(&self) -> Option<&String> {
    self.action.as_ref()
  }

  pub fn reset_action(&mut self) {
    self.action = None;
  }

  pub fn set_api_version(&mut self, api_version: String) {
    self.api_version = Some(api_version);
  }

  pub fn with_api_version(mut self, api_version: String) -> IoK8sApiCoreV1Event {
    self.api_version = Some(api_version);
    self
  }

  pub fn api_version(&self) -> Option<&String> {
    self.api_version.as_ref()
  }

  pub fn reset_api_version(&mut self) {
    self.api_version = None;
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> IoK8sApiCoreV1Event {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_event_time(&mut self, event_time: String) {
    self.event_time = Some(event_time);
  }

  pub fn with_event_time(mut self, event_time: String) -> IoK8sApiCoreV1Event {
    self.event_time = Some(event_time);
    self
  }

  pub fn event_time(&self) -> Option<&String> {
    self.event_time.as_ref()
  }

  pub fn reset_event_time(&mut self) {
    self.event_time = None;
  }

  pub fn set_first_timestamp(&mut self, first_timestamp: String) {
    self.first_timestamp = Some(first_timestamp);
  }

  pub fn with_first_timestamp(mut self, first_timestamp: String) -> IoK8sApiCoreV1Event {
    self.first_timestamp = Some(first_timestamp);
    self
  }

  pub fn first_timestamp(&self) -> Option<&String> {
    self.first_timestamp.as_ref()
  }

  pub fn reset_first_timestamp(&mut self) {
    self.first_timestamp = None;
  }

  pub fn set_involved_object(&mut self, involved_object: ::models::IoK8sApiCoreV1ObjectReference) {
    self.involved_object = involved_object;
  }

  pub fn with_involved_object(mut self, involved_object: ::models::IoK8sApiCoreV1ObjectReference) -> IoK8sApiCoreV1Event {
    self.involved_object = involved_object;
    self
  }

  pub fn involved_object(&self) -> &::models::IoK8sApiCoreV1ObjectReference {
    &self.involved_object
  }


  pub fn set_kind(&mut self, kind: String) {
    self.kind = Some(kind);
  }

  pub fn with_kind(mut self, kind: String) -> IoK8sApiCoreV1Event {
    self.kind = Some(kind);
    self
  }

  pub fn kind(&self) -> Option<&String> {
    self.kind.as_ref()
  }

  pub fn reset_kind(&mut self) {
    self.kind = None;
  }

  pub fn set_last_timestamp(&mut self, last_timestamp: String) {
    self.last_timestamp = Some(last_timestamp);
  }

  pub fn with_last_timestamp(mut self, last_timestamp: String) -> IoK8sApiCoreV1Event {
    self.last_timestamp = Some(last_timestamp);
    self
  }

  pub fn last_timestamp(&self) -> Option<&String> {
    self.last_timestamp.as_ref()
  }

  pub fn reset_last_timestamp(&mut self) {
    self.last_timestamp = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> IoK8sApiCoreV1Event {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_metadata(&mut self, metadata: ::models::IoK8sApimachineryPkgApisMetaV1ObjectMeta) {
    self.metadata = metadata;
  }

  pub fn with_metadata(mut self, metadata: ::models::IoK8sApimachineryPkgApisMetaV1ObjectMeta) -> IoK8sApiCoreV1Event {
    self.metadata = metadata;
    self
  }

  pub fn metadata(&self) -> &::models::IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    &self.metadata
  }


  pub fn set_reason(&mut self, reason: String) {
    self.reason = Some(reason);
  }

  pub fn with_reason(mut self, reason: String) -> IoK8sApiCoreV1Event {
    self.reason = Some(reason);
    self
  }

  pub fn reason(&self) -> Option<&String> {
    self.reason.as_ref()
  }

  pub fn reset_reason(&mut self) {
    self.reason = None;
  }

  pub fn set_related(&mut self, related: ::models::IoK8sApiCoreV1ObjectReference) {
    self.related = Some(related);
  }

  pub fn with_related(mut self, related: ::models::IoK8sApiCoreV1ObjectReference) -> IoK8sApiCoreV1Event {
    self.related = Some(related);
    self
  }

  pub fn related(&self) -> Option<&::models::IoK8sApiCoreV1ObjectReference> {
    self.related.as_ref()
  }

  pub fn reset_related(&mut self) {
    self.related = None;
  }

  pub fn set_reporting_component(&mut self, reporting_component: String) {
    self.reporting_component = Some(reporting_component);
  }

  pub fn with_reporting_component(mut self, reporting_component: String) -> IoK8sApiCoreV1Event {
    self.reporting_component = Some(reporting_component);
    self
  }

  pub fn reporting_component(&self) -> Option<&String> {
    self.reporting_component.as_ref()
  }

  pub fn reset_reporting_component(&mut self) {
    self.reporting_component = None;
  }

  pub fn set_reporting_instance(&mut self, reporting_instance: String) {
    self.reporting_instance = Some(reporting_instance);
  }

  pub fn with_reporting_instance(mut self, reporting_instance: String) -> IoK8sApiCoreV1Event {
    self.reporting_instance = Some(reporting_instance);
    self
  }

  pub fn reporting_instance(&self) -> Option<&String> {
    self.reporting_instance.as_ref()
  }

  pub fn reset_reporting_instance(&mut self) {
    self.reporting_instance = None;
  }

  pub fn set_series(&mut self, series: ::models::IoK8sApiCoreV1EventSeries) {
    self.series = Some(series);
  }

  pub fn with_series(mut self, series: ::models::IoK8sApiCoreV1EventSeries) -> IoK8sApiCoreV1Event {
    self.series = Some(series);
    self
  }

  pub fn series(&self) -> Option<&::models::IoK8sApiCoreV1EventSeries> {
    self.series.as_ref()
  }

  pub fn reset_series(&mut self) {
    self.series = None;
  }

  pub fn set_source(&mut self, source: ::models::IoK8sApiCoreV1EventSource) {
    self.source = Some(source);
  }

  pub fn with_source(mut self, source: ::models::IoK8sApiCoreV1EventSource) -> IoK8sApiCoreV1Event {
    self.source = Some(source);
    self
  }

  pub fn source(&self) -> Option<&::models::IoK8sApiCoreV1EventSource> {
    self.source.as_ref()
  }

  pub fn reset_source(&mut self) {
    self.source = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> IoK8sApiCoreV1Event {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



