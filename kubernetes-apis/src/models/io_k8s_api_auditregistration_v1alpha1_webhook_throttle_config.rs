/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig : WebhookThrottleConfig holds the configuration for throttling events

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig {
  /// ThrottleBurst is the maximum number of events sent at the same moment default 15 QPS
  #[serde(rename = "burst")]
  burst: Option<i64>,
  /// ThrottleQPS maximum number of batches per second default 10 QPS
  #[serde(rename = "qps")]
  qps: Option<i64>
}

impl IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig {
  /// WebhookThrottleConfig holds the configuration for throttling events
  pub fn new() -> IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig {
    IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig {
      burst: None,
      qps: None
    }
  }

  pub fn set_burst(&mut self, burst: i64) {
    self.burst = Some(burst);
  }

  pub fn with_burst(mut self, burst: i64) -> IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig {
    self.burst = Some(burst);
    self
  }

  pub fn burst(&self) -> Option<&i64> {
    self.burst.as_ref()
  }

  pub fn reset_burst(&mut self) {
    self.burst = None;
  }

  pub fn set_qps(&mut self, qps: i64) {
    self.qps = Some(qps);
  }

  pub fn with_qps(mut self, qps: i64) -> IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig {
    self.qps = Some(qps);
    self
  }

  pub fn qps(&self) -> Option<&i64> {
    self.qps.as_ref()
  }

  pub fn reset_qps(&mut self) {
    self.qps = None;
  }

}



