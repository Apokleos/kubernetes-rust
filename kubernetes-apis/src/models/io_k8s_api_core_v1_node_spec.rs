/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1NodeSpec : NodeSpec describes the attributes that a node is created with.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1NodeSpec {
  #[serde(rename = "configSource")]
  config_source: Option<::models::IoK8sApiCoreV1NodeConfigSource>,
  /// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
  #[serde(rename = "externalID")]
  external_id: Option<String>,
  /// PodCIDR represents the pod IP range assigned to the node.
  #[serde(rename = "podCIDR")]
  pod_cidr: Option<String>,
  /// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
  #[serde(rename = "providerID")]
  provider_id: Option<String>,
  /// If specified, the node's taints.
  #[serde(rename = "taints")]
  taints: Option<Vec<::models::IoK8sApiCoreV1Taint>>,
  /// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
  #[serde(rename = "unschedulable")]
  unschedulable: Option<bool>
}

impl IoK8sApiCoreV1NodeSpec {
  /// NodeSpec describes the attributes that a node is created with.
  pub fn new() -> IoK8sApiCoreV1NodeSpec {
    IoK8sApiCoreV1NodeSpec {
      config_source: None,
      external_id: None,
      pod_cidr: None,
      provider_id: None,
      taints: None,
      unschedulable: None
    }
  }

  pub fn set_config_source(&mut self, config_source: ::models::IoK8sApiCoreV1NodeConfigSource) {
    self.config_source = Some(config_source);
  }

  pub fn with_config_source(mut self, config_source: ::models::IoK8sApiCoreV1NodeConfigSource) -> IoK8sApiCoreV1NodeSpec {
    self.config_source = Some(config_source);
    self
  }

  pub fn config_source(&self) -> Option<&::models::IoK8sApiCoreV1NodeConfigSource> {
    self.config_source.as_ref()
  }

  pub fn reset_config_source(&mut self) {
    self.config_source = None;
  }

  pub fn set_external_id(&mut self, external_id: String) {
    self.external_id = Some(external_id);
  }

  pub fn with_external_id(mut self, external_id: String) -> IoK8sApiCoreV1NodeSpec {
    self.external_id = Some(external_id);
    self
  }

  pub fn external_id(&self) -> Option<&String> {
    self.external_id.as_ref()
  }

  pub fn reset_external_id(&mut self) {
    self.external_id = None;
  }

  pub fn set_pod_cidr(&mut self, pod_cidr: String) {
    self.pod_cidr = Some(pod_cidr);
  }

  pub fn with_pod_cidr(mut self, pod_cidr: String) -> IoK8sApiCoreV1NodeSpec {
    self.pod_cidr = Some(pod_cidr);
    self
  }

  pub fn pod_cidr(&self) -> Option<&String> {
    self.pod_cidr.as_ref()
  }

  pub fn reset_pod_cidr(&mut self) {
    self.pod_cidr = None;
  }

  pub fn set_provider_id(&mut self, provider_id: String) {
    self.provider_id = Some(provider_id);
  }

  pub fn with_provider_id(mut self, provider_id: String) -> IoK8sApiCoreV1NodeSpec {
    self.provider_id = Some(provider_id);
    self
  }

  pub fn provider_id(&self) -> Option<&String> {
    self.provider_id.as_ref()
  }

  pub fn reset_provider_id(&mut self) {
    self.provider_id = None;
  }

  pub fn set_taints(&mut self, taints: Vec<::models::IoK8sApiCoreV1Taint>) {
    self.taints = Some(taints);
  }

  pub fn with_taints(mut self, taints: Vec<::models::IoK8sApiCoreV1Taint>) -> IoK8sApiCoreV1NodeSpec {
    self.taints = Some(taints);
    self
  }

  pub fn taints(&self) -> Option<&Vec<::models::IoK8sApiCoreV1Taint>> {
    self.taints.as_ref()
  }

  pub fn reset_taints(&mut self) {
    self.taints = None;
  }

  pub fn set_unschedulable(&mut self, unschedulable: bool) {
    self.unschedulable = Some(unschedulable);
  }

  pub fn with_unschedulable(mut self, unschedulable: bool) -> IoK8sApiCoreV1NodeSpec {
    self.unschedulable = Some(unschedulable);
    self
  }

  pub fn unschedulable(&self) -> Option<&bool> {
    self.unschedulable.as_ref()
  }

  pub fn reset_unschedulable(&mut self) {
    self.unschedulable = None;
  }

}



