/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1ScopedResourceSelectorRequirement : A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1ScopedResourceSelectorRequirement {
  /// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
  #[serde(rename = "operator")]
  operator: String,
  /// The name of the scope that the selector applies to.
  #[serde(rename = "scopeName")]
  scope_name: String,
  /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
  #[serde(rename = "values")]
  values: Option<Vec<String>>
}

impl IoK8sApiCoreV1ScopedResourceSelectorRequirement {
  /// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
  pub fn new(operator: String, scope_name: String) -> IoK8sApiCoreV1ScopedResourceSelectorRequirement {
    IoK8sApiCoreV1ScopedResourceSelectorRequirement {
      operator: operator,
      scope_name: scope_name,
      values: None
    }
  }

  pub fn set_operator(&mut self, operator: String) {
    self.operator = operator;
  }

  pub fn with_operator(mut self, operator: String) -> IoK8sApiCoreV1ScopedResourceSelectorRequirement {
    self.operator = operator;
    self
  }

  pub fn operator(&self) -> &String {
    &self.operator
  }


  pub fn set_scope_name(&mut self, scope_name: String) {
    self.scope_name = scope_name;
  }

  pub fn with_scope_name(mut self, scope_name: String) -> IoK8sApiCoreV1ScopedResourceSelectorRequirement {
    self.scope_name = scope_name;
    self
  }

  pub fn scope_name(&self) -> &String {
    &self.scope_name
  }


  pub fn set_values(&mut self, values: Vec<String>) {
    self.values = Some(values);
  }

  pub fn with_values(mut self, values: Vec<String>) -> IoK8sApiCoreV1ScopedResourceSelectorRequirement {
    self.values = Some(values);
    self
  }

  pub fn values(&self) -> Option<&Vec<String>> {
    self.values.as_ref()
  }

  pub fn reset_values(&mut self) {
    self.values = None;
  }

}



