/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiAuditregistrationV1alpha1Webhook : Webhook holds the configuration of the webhook

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiAuditregistrationV1alpha1Webhook {
  #[serde(rename = "clientConfig")]
  client_config: ::models::IoK8sApiAuditregistrationV1alpha1WebhookClientConfig,
  #[serde(rename = "throttle")]
  throttle: Option<::models::IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig>
}

impl IoK8sApiAuditregistrationV1alpha1Webhook {
  /// Webhook holds the configuration of the webhook
  pub fn new(client_config: ::models::IoK8sApiAuditregistrationV1alpha1WebhookClientConfig) -> IoK8sApiAuditregistrationV1alpha1Webhook {
    IoK8sApiAuditregistrationV1alpha1Webhook {
      client_config: client_config,
      throttle: None
    }
  }

  pub fn set_client_config(&mut self, client_config: ::models::IoK8sApiAuditregistrationV1alpha1WebhookClientConfig) {
    self.client_config = client_config;
  }

  pub fn with_client_config(mut self, client_config: ::models::IoK8sApiAuditregistrationV1alpha1WebhookClientConfig) -> IoK8sApiAuditregistrationV1alpha1Webhook {
    self.client_config = client_config;
    self
  }

  pub fn client_config(&self) -> &::models::IoK8sApiAuditregistrationV1alpha1WebhookClientConfig {
    &self.client_config
  }


  pub fn set_throttle(&mut self, throttle: ::models::IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig) {
    self.throttle = Some(throttle);
  }

  pub fn with_throttle(mut self, throttle: ::models::IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig) -> IoK8sApiAuditregistrationV1alpha1Webhook {
    self.throttle = Some(throttle);
    self
  }

  pub fn throttle(&self) -> Option<&::models::IoK8sApiAuditregistrationV1alpha1WebhookThrottleConfig> {
    self.throttle.as_ref()
  }

  pub fn reset_throttle(&mut self) {
    self.throttle = None;
  }

}



