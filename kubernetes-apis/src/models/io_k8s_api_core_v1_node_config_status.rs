/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1NodeConfigStatus : NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1NodeConfigStatus {
  #[serde(rename = "active")]
  active: Option<::models::IoK8sApiCoreV1NodeConfigSource>,
  #[serde(rename = "assigned")]
  assigned: Option<::models::IoK8sApiCoreV1NodeConfigSource>,
  /// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
  #[serde(rename = "error")]
  error: Option<String>,
  #[serde(rename = "lastKnownGood")]
  last_known_good: Option<::models::IoK8sApiCoreV1NodeConfigSource>
}

impl IoK8sApiCoreV1NodeConfigStatus {
  /// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
  pub fn new() -> IoK8sApiCoreV1NodeConfigStatus {
    IoK8sApiCoreV1NodeConfigStatus {
      active: None,
      assigned: None,
      error: None,
      last_known_good: None
    }
  }

  pub fn set_active(&mut self, active: ::models::IoK8sApiCoreV1NodeConfigSource) {
    self.active = Some(active);
  }

  pub fn with_active(mut self, active: ::models::IoK8sApiCoreV1NodeConfigSource) -> IoK8sApiCoreV1NodeConfigStatus {
    self.active = Some(active);
    self
  }

  pub fn active(&self) -> Option<&::models::IoK8sApiCoreV1NodeConfigSource> {
    self.active.as_ref()
  }

  pub fn reset_active(&mut self) {
    self.active = None;
  }

  pub fn set_assigned(&mut self, assigned: ::models::IoK8sApiCoreV1NodeConfigSource) {
    self.assigned = Some(assigned);
  }

  pub fn with_assigned(mut self, assigned: ::models::IoK8sApiCoreV1NodeConfigSource) -> IoK8sApiCoreV1NodeConfigStatus {
    self.assigned = Some(assigned);
    self
  }

  pub fn assigned(&self) -> Option<&::models::IoK8sApiCoreV1NodeConfigSource> {
    self.assigned.as_ref()
  }

  pub fn reset_assigned(&mut self) {
    self.assigned = None;
  }

  pub fn set_error(&mut self, error: String) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: String) -> IoK8sApiCoreV1NodeConfigStatus {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&String> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_last_known_good(&mut self, last_known_good: ::models::IoK8sApiCoreV1NodeConfigSource) {
    self.last_known_good = Some(last_known_good);
  }

  pub fn with_last_known_good(mut self, last_known_good: ::models::IoK8sApiCoreV1NodeConfigSource) -> IoK8sApiCoreV1NodeConfigStatus {
    self.last_known_good = Some(last_known_good);
    self
  }

  pub fn last_known_good(&self) -> Option<&::models::IoK8sApiCoreV1NodeConfigSource> {
    self.last_known_good.as_ref()
  }

  pub fn reset_last_known_good(&mut self) {
    self.last_known_good = None;
  }

}



