/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1TypedLocalObjectReference : TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1TypedLocalObjectReference {
  /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
  #[serde(rename = "apiGroup")]
  api_group: Option<String>,
  /// Kind is the type of resource being referenced
  #[serde(rename = "kind")]
  kind: String,
  /// Name is the name of resource being referenced
  #[serde(rename = "name")]
  name: String
}

impl IoK8sApiCoreV1TypedLocalObjectReference {
  /// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
  pub fn new(kind: String, name: String) -> IoK8sApiCoreV1TypedLocalObjectReference {
    IoK8sApiCoreV1TypedLocalObjectReference {
      api_group: None,
      kind: kind,
      name: name
    }
  }

  pub fn set_api_group(&mut self, api_group: String) {
    self.api_group = Some(api_group);
  }

  pub fn with_api_group(mut self, api_group: String) -> IoK8sApiCoreV1TypedLocalObjectReference {
    self.api_group = Some(api_group);
    self
  }

  pub fn api_group(&self) -> Option<&String> {
    self.api_group.as_ref()
  }

  pub fn reset_api_group(&mut self) {
    self.api_group = None;
  }

  pub fn set_kind(&mut self, kind: String) {
    self.kind = kind;
  }

  pub fn with_kind(mut self, kind: String) -> IoK8sApiCoreV1TypedLocalObjectReference {
    self.kind = kind;
    self
  }

  pub fn kind(&self) -> &String {
    &self.kind
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> IoK8sApiCoreV1TypedLocalObjectReference {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


}



