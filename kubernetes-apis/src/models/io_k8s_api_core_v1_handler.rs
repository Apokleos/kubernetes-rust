/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1Handler : Handler defines a specific action that should be taken

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1Handler {
  #[serde(rename = "exec")]
  exec: Option<::models::IoK8sApiCoreV1ExecAction>,
  #[serde(rename = "httpGet")]
  http_get: Option<::models::IoK8sApiCoreV1HttpGetAction>,
  #[serde(rename = "tcpSocket")]
  tcp_socket: Option<::models::IoK8sApiCoreV1TcpSocketAction>
}

impl IoK8sApiCoreV1Handler {
  /// Handler defines a specific action that should be taken
  pub fn new() -> IoK8sApiCoreV1Handler {
    IoK8sApiCoreV1Handler {
      exec: None,
      http_get: None,
      tcp_socket: None
    }
  }

  pub fn set_exec(&mut self, exec: ::models::IoK8sApiCoreV1ExecAction) {
    self.exec = Some(exec);
  }

  pub fn with_exec(mut self, exec: ::models::IoK8sApiCoreV1ExecAction) -> IoK8sApiCoreV1Handler {
    self.exec = Some(exec);
    self
  }

  pub fn exec(&self) -> Option<&::models::IoK8sApiCoreV1ExecAction> {
    self.exec.as_ref()
  }

  pub fn reset_exec(&mut self) {
    self.exec = None;
  }

  pub fn set_http_get(&mut self, http_get: ::models::IoK8sApiCoreV1HttpGetAction) {
    self.http_get = Some(http_get);
  }

  pub fn with_http_get(mut self, http_get: ::models::IoK8sApiCoreV1HttpGetAction) -> IoK8sApiCoreV1Handler {
    self.http_get = Some(http_get);
    self
  }

  pub fn http_get(&self) -> Option<&::models::IoK8sApiCoreV1HttpGetAction> {
    self.http_get.as_ref()
  }

  pub fn reset_http_get(&mut self) {
    self.http_get = None;
  }

  pub fn set_tcp_socket(&mut self, tcp_socket: ::models::IoK8sApiCoreV1TcpSocketAction) {
    self.tcp_socket = Some(tcp_socket);
  }

  pub fn with_tcp_socket(mut self, tcp_socket: ::models::IoK8sApiCoreV1TcpSocketAction) -> IoK8sApiCoreV1Handler {
    self.tcp_socket = Some(tcp_socket);
    self
  }

  pub fn tcp_socket(&self) -> Option<&::models::IoK8sApiCoreV1TcpSocketAction> {
    self.tcp_socket.as_ref()
  }

  pub fn reset_tcp_socket(&mut self) {
    self.tcp_socket = None;
  }

}



