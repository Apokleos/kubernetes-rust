/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiAuthenticationV1TokenReviewStatus : TokenReviewStatus is the result of the token authentication request.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiAuthenticationV1TokenReviewStatus {
  /// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.
  #[serde(rename = "audiences")]
  audiences: Option<Vec<String>>,
  /// Authenticated indicates that the token was associated with a known user.
  #[serde(rename = "authenticated")]
  authenticated: Option<bool>,
  /// Error indicates that the token couldn't be checked
  #[serde(rename = "error")]
  error: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::IoK8sApiAuthenticationV1UserInfo>
}

impl IoK8sApiAuthenticationV1TokenReviewStatus {
  /// TokenReviewStatus is the result of the token authentication request.
  pub fn new() -> IoK8sApiAuthenticationV1TokenReviewStatus {
    IoK8sApiAuthenticationV1TokenReviewStatus {
      audiences: None,
      authenticated: None,
      error: None,
      user: None
    }
  }

  pub fn set_audiences(&mut self, audiences: Vec<String>) {
    self.audiences = Some(audiences);
  }

  pub fn with_audiences(mut self, audiences: Vec<String>) -> IoK8sApiAuthenticationV1TokenReviewStatus {
    self.audiences = Some(audiences);
    self
  }

  pub fn audiences(&self) -> Option<&Vec<String>> {
    self.audiences.as_ref()
  }

  pub fn reset_audiences(&mut self) {
    self.audiences = None;
  }

  pub fn set_authenticated(&mut self, authenticated: bool) {
    self.authenticated = Some(authenticated);
  }

  pub fn with_authenticated(mut self, authenticated: bool) -> IoK8sApiAuthenticationV1TokenReviewStatus {
    self.authenticated = Some(authenticated);
    self
  }

  pub fn authenticated(&self) -> Option<&bool> {
    self.authenticated.as_ref()
  }

  pub fn reset_authenticated(&mut self) {
    self.authenticated = None;
  }

  pub fn set_error(&mut self, error: String) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: String) -> IoK8sApiAuthenticationV1TokenReviewStatus {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&String> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_user(&mut self, user: ::models::IoK8sApiAuthenticationV1UserInfo) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::IoK8sApiAuthenticationV1UserInfo) -> IoK8sApiAuthenticationV1TokenReviewStatus {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::IoK8sApiAuthenticationV1UserInfo> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



