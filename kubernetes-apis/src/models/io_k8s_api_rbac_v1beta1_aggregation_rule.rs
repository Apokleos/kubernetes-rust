/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiRbacV1beta1AggregationRule : AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiRbacV1beta1AggregationRule {
  /// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
  #[serde(rename = "clusterRoleSelectors")]
  cluster_role_selectors: Option<Vec<::models::IoK8sApimachineryPkgApisMetaV1LabelSelector>>
}

impl IoK8sApiRbacV1beta1AggregationRule {
  /// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
  pub fn new() -> IoK8sApiRbacV1beta1AggregationRule {
    IoK8sApiRbacV1beta1AggregationRule {
      cluster_role_selectors: None
    }
  }

  pub fn set_cluster_role_selectors(&mut self, cluster_role_selectors: Vec<::models::IoK8sApimachineryPkgApisMetaV1LabelSelector>) {
    self.cluster_role_selectors = Some(cluster_role_selectors);
  }

  pub fn with_cluster_role_selectors(mut self, cluster_role_selectors: Vec<::models::IoK8sApimachineryPkgApisMetaV1LabelSelector>) -> IoK8sApiRbacV1beta1AggregationRule {
    self.cluster_role_selectors = Some(cluster_role_selectors);
    self
  }

  pub fn cluster_role_selectors(&self) -> Option<&Vec<::models::IoK8sApimachineryPkgApisMetaV1LabelSelector>> {
    self.cluster_role_selectors.as_ref()
  }

  pub fn reset_cluster_role_selectors(&mut self) {
    self.cluster_role_selectors = None;
  }

}



