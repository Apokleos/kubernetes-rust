/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions : SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use SupplementalGroupsStrategyOptions from policy API Group instead.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions {
  /// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
  #[serde(rename = "ranges")]
  ranges: Option<Vec<::models::IoK8sApiExtensionsV1beta1IdRange>>,
  /// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
  #[serde(rename = "rule")]
  rule: Option<String>
}

impl IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions {
  /// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use SupplementalGroupsStrategyOptions from policy API Group instead.
  pub fn new() -> IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions {
    IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions {
      ranges: None,
      rule: None
    }
  }

  pub fn set_ranges(&mut self, ranges: Vec<::models::IoK8sApiExtensionsV1beta1IdRange>) {
    self.ranges = Some(ranges);
  }

  pub fn with_ranges(mut self, ranges: Vec<::models::IoK8sApiExtensionsV1beta1IdRange>) -> IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions {
    self.ranges = Some(ranges);
    self
  }

  pub fn ranges(&self) -> Option<&Vec<::models::IoK8sApiExtensionsV1beta1IdRange>> {
    self.ranges.as_ref()
  }

  pub fn reset_ranges(&mut self) {
    self.ranges = None;
  }

  pub fn set_rule(&mut self, rule: String) {
    self.rule = Some(rule);
  }

  pub fn with_rule(mut self, rule: String) -> IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions {
    self.rule = Some(rule);
    self
  }

  pub fn rule(&self) -> Option<&String> {
    self.rule.as_ref()
  }

  pub fn reset_rule(&mut self) {
    self.rule = None;
  }

}



