/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion : CustomResourceDefinitionVersion describes a version for CRD.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
  /// AdditionalPrinterColumns are additional columns shown e.g. in kubectl next to the name. Defaults to a created-at column. Top-level and per-version columns are mutually exclusive. Per-version columns must not all be set to identical values (top-level columns should be used instead) This field is alpha-level and is only honored by servers that enable the CustomResourceWebhookConversion feature. NOTE: CRDs created prior to 1.13 populated the top-level additionalPrinterColumns field by default. To apply an update that changes to per-version additionalPrinterColumns, the top-level additionalPrinterColumns field must be explicitly set to null
  #[serde(rename = "additionalPrinterColumns")]
  additional_printer_columns: Option<Vec<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition>>,
  /// Name is the version name, e.g. “v1”, “v2beta1”, etc.
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "schema")]
  schema: Option<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation>,
  /// Served is a flag enabling/disabling this version from being served via REST APIs
  #[serde(rename = "served")]
  served: bool,
  /// Storage flags the version as storage version. There must be exactly one flagged as storage version.
  #[serde(rename = "storage")]
  storage: bool,
  #[serde(rename = "subresources")]
  subresources: Option<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources>
}

impl IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
  /// CustomResourceDefinitionVersion describes a version for CRD.
  pub fn new(name: String, served: bool, storage: bool) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
      additional_printer_columns: None,
      name: name,
      schema: None,
      served: served,
      storage: storage,
      subresources: None
    }
  }

  pub fn set_additional_printer_columns(&mut self, additional_printer_columns: Vec<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition>) {
    self.additional_printer_columns = Some(additional_printer_columns);
  }

  pub fn with_additional_printer_columns(mut self, additional_printer_columns: Vec<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition>) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
    self.additional_printer_columns = Some(additional_printer_columns);
    self
  }

  pub fn additional_printer_columns(&self) -> Option<&Vec<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition>> {
    self.additional_printer_columns.as_ref()
  }

  pub fn reset_additional_printer_columns(&mut self) {
    self.additional_printer_columns = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_schema(&mut self, schema: ::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation) {
    self.schema = Some(schema);
  }

  pub fn with_schema(mut self, schema: ::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
    self.schema = Some(schema);
    self
  }

  pub fn schema(&self) -> Option<&::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation> {
    self.schema.as_ref()
  }

  pub fn reset_schema(&mut self) {
    self.schema = None;
  }

  pub fn set_served(&mut self, served: bool) {
    self.served = served;
  }

  pub fn with_served(mut self, served: bool) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
    self.served = served;
    self
  }

  pub fn served(&self) -> &bool {
    &self.served
  }


  pub fn set_storage(&mut self, storage: bool) {
    self.storage = storage;
  }

  pub fn with_storage(mut self, storage: bool) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
    self.storage = storage;
    self
  }

  pub fn storage(&self) -> &bool {
    &self.storage
  }


  pub fn set_subresources(&mut self, subresources: ::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources) {
    self.subresources = Some(subresources);
  }

  pub fn with_subresources(mut self, subresources: ::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion {
    self.subresources = Some(subresources);
    self
  }

  pub fn subresources(&self) -> Option<&::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources> {
    self.subresources.as_ref()
  }

  pub fn reset_subresources(&mut self) {
    self.subresources = None;
  }

}



