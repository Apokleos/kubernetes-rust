/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1TopologySelectorLabelRequirement : A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1TopologySelectorLabelRequirement {
  /// The label key that the selector applies to.
  #[serde(rename = "key")]
  key: String,
  /// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
  #[serde(rename = "values")]
  values: Vec<String>
}

impl IoK8sApiCoreV1TopologySelectorLabelRequirement {
  /// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
  pub fn new(key: String, values: Vec<String>) -> IoK8sApiCoreV1TopologySelectorLabelRequirement {
    IoK8sApiCoreV1TopologySelectorLabelRequirement {
      key: key,
      values: values
    }
  }

  pub fn set_key(&mut self, key: String) {
    self.key = key;
  }

  pub fn with_key(mut self, key: String) -> IoK8sApiCoreV1TopologySelectorLabelRequirement {
    self.key = key;
    self
  }

  pub fn key(&self) -> &String {
    &self.key
  }


  pub fn set_values(&mut self, values: Vec<String>) {
    self.values = values;
  }

  pub fn with_values(mut self, values: Vec<String>) -> IoK8sApiCoreV1TopologySelectorLabelRequirement {
    self.values = values;
    self
  }

  pub fn values(&self) -> &Vec<String> {
    &self.values
  }


}



