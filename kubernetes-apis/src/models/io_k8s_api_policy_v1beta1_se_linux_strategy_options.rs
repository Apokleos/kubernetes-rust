/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiPolicyV1beta1SeLinuxStrategyOptions : SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiPolicyV1beta1SeLinuxStrategyOptions {
  /// rule is the strategy that will dictate the allowable labels that may be set.
  #[serde(rename = "rule")]
  rule: String,
  #[serde(rename = "seLinuxOptions")]
  se_linux_options: Option<::models::IoK8sApiCoreV1SeLinuxOptions>
}

impl IoK8sApiPolicyV1beta1SeLinuxStrategyOptions {
  /// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
  pub fn new(rule: String) -> IoK8sApiPolicyV1beta1SeLinuxStrategyOptions {
    IoK8sApiPolicyV1beta1SeLinuxStrategyOptions {
      rule: rule,
      se_linux_options: None
    }
  }

  pub fn set_rule(&mut self, rule: String) {
    self.rule = rule;
  }

  pub fn with_rule(mut self, rule: String) -> IoK8sApiPolicyV1beta1SeLinuxStrategyOptions {
    self.rule = rule;
    self
  }

  pub fn rule(&self) -> &String {
    &self.rule
  }


  pub fn set_se_linux_options(&mut self, se_linux_options: ::models::IoK8sApiCoreV1SeLinuxOptions) {
    self.se_linux_options = Some(se_linux_options);
  }

  pub fn with_se_linux_options(mut self, se_linux_options: ::models::IoK8sApiCoreV1SeLinuxOptions) -> IoK8sApiPolicyV1beta1SeLinuxStrategyOptions {
    self.se_linux_options = Some(se_linux_options);
    self
  }

  pub fn se_linux_options(&self) -> Option<&::models::IoK8sApiCoreV1SeLinuxOptions> {
    self.se_linux_options.as_ref()
  }

  pub fn reset_se_linux_options(&mut self) {
    self.se_linux_options = None;
  }

}



