/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus : CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus {
  #[serde(rename = "acceptedNames")]
  accepted_names: ::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames,
  /// Conditions indicate state for particular aspects of a CustomResourceDefinition
  #[serde(rename = "conditions")]
  conditions: Vec<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition>,
  /// StoredVersions are all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so the migration controller can first finish a migration to another version (i.e. that no old objects are left in the storage), and then remove the rest of the versions from this list. None of the versions in this list can be removed from the spec.Versions field.
  #[serde(rename = "storedVersions")]
  stored_versions: Vec<String>
}

impl IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus {
  /// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
  pub fn new(accepted_names: ::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames, conditions: Vec<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition>, stored_versions: Vec<String>) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus {
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus {
      accepted_names: accepted_names,
      conditions: conditions,
      stored_versions: stored_versions
    }
  }

  pub fn set_accepted_names(&mut self, accepted_names: ::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames) {
    self.accepted_names = accepted_names;
  }

  pub fn with_accepted_names(mut self, accepted_names: ::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus {
    self.accepted_names = accepted_names;
    self
  }

  pub fn accepted_names(&self) -> &::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames {
    &self.accepted_names
  }


  pub fn set_conditions(&mut self, conditions: Vec<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition>) {
    self.conditions = conditions;
  }

  pub fn with_conditions(mut self, conditions: Vec<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition>) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus {
    self.conditions = conditions;
    self
  }

  pub fn conditions(&self) -> &Vec<::models::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition> {
    &self.conditions
  }


  pub fn set_stored_versions(&mut self, stored_versions: Vec<String>) {
    self.stored_versions = stored_versions;
  }

  pub fn with_stored_versions(mut self, stored_versions: Vec<String>) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus {
    self.stored_versions = stored_versions;
    self
  }

  pub fn stored_versions(&self) -> &Vec<String> {
    &self.stored_versions
  }


}



