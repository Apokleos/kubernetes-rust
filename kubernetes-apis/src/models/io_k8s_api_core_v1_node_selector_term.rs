/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiCoreV1NodeSelectorTerm : A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1NodeSelectorTerm {
  /// A list of node selector requirements by node's labels.
  #[serde(rename = "matchExpressions")]
  match_expressions: Option<Vec<::models::IoK8sApiCoreV1NodeSelectorRequirement>>,
  /// A list of node selector requirements by node's fields.
  #[serde(rename = "matchFields")]
  match_fields: Option<Vec<::models::IoK8sApiCoreV1NodeSelectorRequirement>>
}

impl IoK8sApiCoreV1NodeSelectorTerm {
  /// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
  pub fn new() -> IoK8sApiCoreV1NodeSelectorTerm {
    IoK8sApiCoreV1NodeSelectorTerm {
      match_expressions: None,
      match_fields: None
    }
  }

  pub fn set_match_expressions(&mut self, match_expressions: Vec<::models::IoK8sApiCoreV1NodeSelectorRequirement>) {
    self.match_expressions = Some(match_expressions);
  }

  pub fn with_match_expressions(mut self, match_expressions: Vec<::models::IoK8sApiCoreV1NodeSelectorRequirement>) -> IoK8sApiCoreV1NodeSelectorTerm {
    self.match_expressions = Some(match_expressions);
    self
  }

  pub fn match_expressions(&self) -> Option<&Vec<::models::IoK8sApiCoreV1NodeSelectorRequirement>> {
    self.match_expressions.as_ref()
  }

  pub fn reset_match_expressions(&mut self) {
    self.match_expressions = None;
  }

  pub fn set_match_fields(&mut self, match_fields: Vec<::models::IoK8sApiCoreV1NodeSelectorRequirement>) {
    self.match_fields = Some(match_fields);
  }

  pub fn with_match_fields(mut self, match_fields: Vec<::models::IoK8sApiCoreV1NodeSelectorRequirement>) -> IoK8sApiCoreV1NodeSelectorTerm {
    self.match_fields = Some(match_fields);
    self
  }

  pub fn match_fields(&self) -> Option<&Vec<::models::IoK8sApiCoreV1NodeSelectorRequirement>> {
    self.match_fields.as_ref()
  }

  pub fn reset_match_fields(&mut self) {
    self.match_fields = None;
  }

}



