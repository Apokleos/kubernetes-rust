/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.13.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApiStorageV1VolumeAttachmentStatus : VolumeAttachmentStatus is the status of a VolumeAttachment request.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApiStorageV1VolumeAttachmentStatus {
  #[serde(rename = "attachError")]
  attach_error: Option<::models::IoK8sApiStorageV1VolumeError>,
  /// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
  #[serde(rename = "attached")]
  attached: bool,
  /// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
  #[serde(rename = "attachmentMetadata")]
  attachment_metadata: Option<::std::collections::HashMap<String, String>>,
  #[serde(rename = "detachError")]
  detach_error: Option<::models::IoK8sApiStorageV1VolumeError>
}

impl IoK8sApiStorageV1VolumeAttachmentStatus {
  /// VolumeAttachmentStatus is the status of a VolumeAttachment request.
  pub fn new(attached: bool) -> IoK8sApiStorageV1VolumeAttachmentStatus {
    IoK8sApiStorageV1VolumeAttachmentStatus {
      attach_error: None,
      attached: attached,
      attachment_metadata: None,
      detach_error: None
    }
  }

  pub fn set_attach_error(&mut self, attach_error: ::models::IoK8sApiStorageV1VolumeError) {
    self.attach_error = Some(attach_error);
  }

  pub fn with_attach_error(mut self, attach_error: ::models::IoK8sApiStorageV1VolumeError) -> IoK8sApiStorageV1VolumeAttachmentStatus {
    self.attach_error = Some(attach_error);
    self
  }

  pub fn attach_error(&self) -> Option<&::models::IoK8sApiStorageV1VolumeError> {
    self.attach_error.as_ref()
  }

  pub fn reset_attach_error(&mut self) {
    self.attach_error = None;
  }

  pub fn set_attached(&mut self, attached: bool) {
    self.attached = attached;
  }

  pub fn with_attached(mut self, attached: bool) -> IoK8sApiStorageV1VolumeAttachmentStatus {
    self.attached = attached;
    self
  }

  pub fn attached(&self) -> &bool {
    &self.attached
  }


  pub fn set_attachment_metadata(&mut self, attachment_metadata: ::std::collections::HashMap<String, String>) {
    self.attachment_metadata = Some(attachment_metadata);
  }

  pub fn with_attachment_metadata(mut self, attachment_metadata: ::std::collections::HashMap<String, String>) -> IoK8sApiStorageV1VolumeAttachmentStatus {
    self.attachment_metadata = Some(attachment_metadata);
    self
  }

  pub fn attachment_metadata(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.attachment_metadata.as_ref()
  }

  pub fn reset_attachment_metadata(&mut self) {
    self.attachment_metadata = None;
  }

  pub fn set_detach_error(&mut self, detach_error: ::models::IoK8sApiStorageV1VolumeError) {
    self.detach_error = Some(detach_error);
  }

  pub fn with_detach_error(mut self, detach_error: ::models::IoK8sApiStorageV1VolumeError) -> IoK8sApiStorageV1VolumeAttachmentStatus {
    self.detach_error = Some(detach_error);
    self
  }

  pub fn detach_error(&self) -> Option<&::models::IoK8sApiStorageV1VolumeError> {
    self.detach_error.as_ref()
  }

  pub fn reset_detach_error(&mut self) {
    self.detach_error = None;
  }

}



